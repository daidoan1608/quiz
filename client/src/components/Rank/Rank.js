import React, { useState, useEffect } from 'react';
import Filter from './Filter';
import Leaderboard from './Leaderboard';
import { ToastContainer, toast } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';
import '../Rank/Rank.css'

// D·ªØ li·ªáu gi·∫£ l·∫≠p (mock data)
const initialData = [
  { rank: 1, username: 'CodeMaster', score: 950, badge: 'üèÜ Chuy√™n gia C', subject: 'Tr√≠ tu·ªá nh√¢n t·∫°o', time: '12:30' },
  { rank: 2, username: 'DataWizard', score: 920, badge: 'üåü Vua thi th·ª≠', subject: 'Thi·∫øt k·∫ø m·∫°ng m√°y t√≠nh', time: '13:15' },
  { rank: 3, username: 'NetworkNinja', score: 890, badge: 'üí° Ng∆∞·ªùi m·ªõi', subject: 'M·∫°ng m√°y t√≠nh', time: '14:00' },
  { rank: 4, username: 'AlgoPro', score: 850, badge: 'üí° Ng∆∞·ªùi m·ªõi', subject: 'L·∫≠p tr√¨nh C', time: '15:10' },
  { rank: 5, username: 'CodeRiser', score: 820, badge: 'üí° Ng∆∞·ªùi m·ªõi', subject: 'C∆° s·ªü d·ªØ li·ªáu', time: '16:20' },
];

const Rank = () => {
  const [leaderboardData, setLeaderboardData] = useState(initialData);
  const [selectedSubject, setSelectedSubject] = useState('T·∫•t c·∫£');
  const [previousRank, setPreviousRank] = useState(null);

  // Gi·∫£ ƒë·ªãnh ng∆∞·ªùi d√πng hi·ªán t·∫°i (current user)
  const currentUser = 'CodeRiser'; // Thay b·∫±ng d·ªØ li·ªáu th·ª±c t·ª´ h·ªá th·ªëng ƒëƒÉng nh·∫≠p

  // T√¨m th·ª© h·∫°ng c·ªßa ng∆∞·ªùi d√πng hi·ªán t·∫°i
  const getUserRank = (data) => {
    const user = data.find((item) => item.username === currentUser);
    return user ? user.rank : null;
  };

  // L·ªçc d·ªØ li·ªáu theo m√¥n h·ªçc
  const handleFilter = (subject) => {
    setSelectedSubject(subject);
    let filteredData = initialData;
    if (subject !== 'T·∫•t c·∫£') {
      filteredData = initialData.filter((item) => item.subject === subject);
    }

    // L·∫•y th·ª© h·∫°ng hi·ªán t·∫°i tr∆∞·ªõc khi c·∫≠p nh·∫≠t
    const currentRank = getUserRank(leaderboardData);

    // C·∫≠p nh·∫≠t d·ªØ li·ªáu b·∫£ng x·∫øp h·∫°ng
    setLeaderboardData(filteredData);

    // L·∫•y th·ª© h·∫°ng m·ªõi sau khi c·∫≠p nh·∫≠t
    const newRank = getUserRank(filteredData);

    // So s√°nh v√† hi·ªÉn th·ªã th√¥ng b√°o
    if (previousRank !== null && newRank !== null && currentRank !== newRank) {
      if (newRank < currentRank) {
        toast.success(`üéâ Ch√∫c m·ª´ng! B·∫°n ƒë√£ tƒÉng h·∫°ng t·ª´ ${currentRank} l√™n ${newRank}!`, {
          position: 'top-right',
          autoClose: 3000,
        });
      } else if (newRank > currentRank) {
        toast.warning(`‚ö†Ô∏è B·∫°n ƒë√£ b·ªã v∆∞·ª£t! Th·ª© h·∫°ng gi·∫£m t·ª´ ${currentRank} xu·ªëng ${newRank}. C·ªë g·∫Øng l√™n nh√©!`, {
          position: 'top-right',
          autoClose: 3000,
        });
      }
    }

    // C·∫≠p nh·∫≠t th·ª© h·∫°ng tr∆∞·ªõc ƒë√≥
    if (newRank !== null) {
      setPreviousRank(newRank);
    }
  };

  // Gi·∫£ l·∫≠p c·∫≠p nh·∫≠t d·ªØ li·ªáu ƒë·ªãnh k·ª≥
  useEffect(() => {
    const interval = setInterval(() => {
      const updatedData = [...initialData];
      updatedData[4] = { ...updatedData[4], score: updatedData[4].score + 10 };
      updatedData.sort((a, b) => b.score - a.score);
      updatedData.forEach((item, index) => (item.rank = index + 1));

      const currentRank = getUserRank(leaderboardData);
      setLeaderboardData(updatedData);
      const newRank = getUserRank(updatedData);

      if (previousRank !== null && newRank !== null && currentRank !== newRank) {
        if (newRank < currentRank) {
          toast.success(`üéâ Ch√∫c m·ª´ng! B·∫°n ƒë√£ tƒÉng h·∫°ng t·ª´ ${currentRank} l√™n ${newRank}!`, {
            position: 'top-right',
            autoClose: 3000,
          });
        } else if (newRank > currentRank) {
          toast.warning(`‚ö†Ô∏è B·∫°n ƒë√£ b·ªã v∆∞·ª£t! Th·ª© h·∫°ng gi·∫£m t·ª´ ${currentRank} xu·ªëng ${newRank}. C·ªë g·∫Øng l√™n nh√©!`, {
            position: 'top-right',
            autoClose: 3000,
          });
        }
      }

      if (newRank !== null) {
        setPreviousRank(newRank);
      }
    }, 10000);

    return () => clearInterval(interval);
  }, [leaderboardData, previousRank]);

  // Kh·ªüi t·∫°o th·ª© h·∫°ng ban ƒë·∫ßu
  useEffect(() => {
    const initialRank = getUserRank(leaderboardData);
    setPreviousRank(initialRank);
  }, []);

  return (
    <div className="Rank">
      <h1>B·∫£ng X·∫øp H·∫°ng FITA</h1>
      <Filter onFilter={handleFilter} selectedSubject={selectedSubject} />
      <Leaderboard data={leaderboardData} />
      <ToastContainer />
    </div>
  );
};

export default Rank;